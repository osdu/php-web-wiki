{"version":3,"sources":["../../node_modules/codemirror/mode/pascal/pascal.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","words","str","obj","split","i","length","keywords","atoms","null","isOperatorChar","tokenBase","stream","state","ch","next","startOfLine","skipToEnd","tokenize","tokenString","eat","tokenComment","test","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","maybeEnd","startState","token","eatSpace","style","electricChars","defineMIME"],"mappings":"CAGA,SAAUA,GACR,SAAWC,UAAW,gBAAmBC,SAAU,SACjDF,EAAIG,QAAQ,6BACT,UAAWC,SAAU,YAAcA,OAAOC,IAC7CD,QAAQ,wBAAyBJ,OAEjCA,GAAIM,cACL,SAASA,GACZ,YAEAA,GAAWC,WAAW,SAAU,WAC9B,QAASC,GAAMC,GACb,GAAIC,MAAUF,EAAQC,EAAIE,MAAM,IAChC,KAAK,GAAIC,GAAI,EAAGA,EAAIJ,EAAMK,SAAUD,EAAGF,EAAIF,EAAMI,IAAM,IACvD,OAAOF,GAET,GAAII,GAAWN,EAAM,8EACA,6EACA,qEACrB,IAAIO,IAASC,OAAQ,KAErB,IAAIC,GAAiB,kBAErB,SAASC,GAAUC,EAAQC,GACzB,GAAIC,GAAKF,EAAOG,MAChB,IAAID,GAAM,KAAOD,EAAMG,YAAa,CAClCJ,EAAOK,WACP,OAAO,OAET,GAAIH,GAAM,KAAOA,GAAM,IAAK,CAC1BD,EAAMK,SAAWC,EAAYL,EAC7B,OAAOD,GAAMK,SAASN,EAAQC,GAEhC,GAAIC,GAAM,KAAOF,EAAOQ,IAAI,KAAM,CAChCP,EAAMK,SAAWG,CACjB,OAAOA,GAAaT,EAAQC,GAE9B,GAAI,qBAAqBS,KAAKR,GAAK,CACjC,MAAO,MAET,GAAI,KAAKQ,KAAKR,GAAK,CACjBF,EAAOW,SAAS,SAChB,OAAO,SAET,GAAIT,GAAM,IAAK,CACb,GAAIF,EAAOQ,IAAI,KAAM,CACnBR,EAAOK,WACP,OAAO,WAGX,GAAIP,EAAeY,KAAKR,GAAK,CAC3BF,EAAOW,SAASb,EAChB,OAAO,WAETE,EAAOW,SAAS,UAChB,IAAIC,GAAMZ,EAAOa,SACjB,IAAIlB,EAASmB,qBAAqBF,GAAM,MAAO,SAC/C,IAAIhB,EAAMkB,qBAAqBF,GAAM,MAAO,MAC5C,OAAO,WAGT,QAASL,GAAYQ,GACnB,MAAO,UAASf,EAAQC,GACtB,GAAIe,GAAU,MAAOb,EAAMc,EAAM,KACjC,QAAQd,EAAOH,EAAOG,SAAW,KAAM,CACrC,GAAIA,GAAQY,IAAUC,EAAS,CAACC,EAAM,IAAM,OAC5CD,GAAWA,GAAWb,GAAQ,KAEhC,GAAIc,IAAQD,EAASf,EAAMK,SAAW,IACtC,OAAO,UAIX,QAASG,GAAaT,EAAQC,GAC5B,GAAIiB,GAAW,MAAOhB,CACtB,OAAOA,EAAKF,EAAOG,OAAQ,CACzB,GAAID,GAAM,KAAOgB,EAAU,CACzBjB,EAAMK,SAAW,IACjB,OAEFY,EAAYhB,GAAM,IAEpB,MAAO,UAKT,OACEiB,WAAY,WACV,OAAQb,SAAU,OAGpBc,MAAO,SAASpB,EAAQC,GACtB,GAAID,EAAOqB,WAAY,MAAO,KAC9B,IAAIC,IAASrB,EAAMK,UAAYP,GAAWC,EAAQC,EAClD,IAAIqB,GAAS,WAAaA,GAAS,OAAQ,MAAOA,EAClD,OAAOA,IAGTC,cAAe,OAInBpC,GAAWqC,WAAW,gBAAiB","file":"pascal.min.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pascal\", function() {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = words(\"and array begin case const div do downto else end file for forward integer \" +\n                       \"boolean char function goto if in label mod nil not of or packed procedure \" +\n                       \"program record repeat set string then to type until var while with\");\n  var atoms = {\"null\": true};\n\n  var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == \"#\" && state.startOfLine) {\n      stream.skipToEnd();\n      return \"meta\";\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (ch == \"(\" && stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped) state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \")\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  // Interface\n\n  return {\n    startState: function() {\n      return {tokenize: null};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      return style;\n    },\n\n    electricChars: \"{}\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-pascal\", \"pascal\");\n\n});\n"]}