(function(a){if(typeof exports=="object"&&typeof module=="object")a(require("../../lib/codemirror"));else if(typeof define=="function"&&define.amd)define(["../../lib/codemirror"],a);else a(CodeMirror)})(function(a){"use strict";function b(a){return new RegExp("^(("+a.join(")|(")+"))\\b","i")}var c=["package","message","import","syntax","required","optional","repeated","reserved","default","extensions","packed","bool","bytes","double","enum","float","string","int32","int64","uint32","uint64","sint32","sint64","fixed32","fixed64","sfixed32","sfixed64"];var d=b(c);a.registerHelper("hintWords","protobuf",c);var e=new RegExp("^[_A-Za-z¡-￿][_A-Za-z0-9¡-￿]*");function f(a){if(a.eatSpace())return null;if(a.match("//")){a.skipToEnd();return"comment"}if(a.match(/^[0-9\.+-]/,false)){if(a.match(/^[+-]?0x[0-9a-fA-F]+/))return"number";if(a.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))return"number";if(a.match(/^[+-]?\d+([EeDd][+-]?\d+)?/))return"number"}if(a.match(/^"([^"]|(""))*"/)){return"string"}if(a.match(/^'([^']|(''))*'/)){return"string"}if(a.match(d)){return"keyword"}if(a.match(e)){return"variable"}a.next();return null}a.defineMode("protobuf",function(){return{token:f}});a.defineMIME("text/x-protobuf","protobuf")});
//# sourceMappingURL=protobuf.min.js.map