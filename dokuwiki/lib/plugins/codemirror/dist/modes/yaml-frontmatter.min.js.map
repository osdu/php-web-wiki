{"version":3,"sources":["../../node_modules/codemirror/mode/yaml-frontmatter/yaml-frontmatter.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","START","FRONTMATTER","BODY","defineMode","config","parserConfig","yamlMode","getMode","innerMode","base","curMode","state","startState","inner","copyState","token","stream","match","end","sol","style","mode","blankLine"],"mappings":"CAGA,SAAWA,GACT,SAAWC,UAAW,gBAAmBC,SAAU,SACjDF,EAAIG,QAAQ,wBAAyBA,QAAQ,qBAC1C,UAAWC,SAAU,YAAcA,OAAOC,IAC7CD,QAAQ,uBAAwB,gBAAiBJ,OAEjDA,GAAIM,cACL,SAAUA,GAEX,GAAIC,GAAQ,EAAGC,EAAc,EAAGC,EAAO,CAGvCH,GAAWI,WAAW,mBAAoB,SAAUC,EAAQC,GAC1D,GAAIC,GAAWP,EAAWQ,QAAQH,EAAQ,OAC1C,IAAII,GAAYT,EAAWQ,QAAQH,EAAQC,GAAgBA,EAAaI,MAAQ,MAEhF,SAASC,GAAQC,GACf,MAAOA,GAAMA,OAAST,EAAOM,EAAYF,EAG3C,OACEM,WAAY,WACV,OACED,MAAOX,EACPa,MAAOd,EAAWa,WAAWN,KAGjCQ,UAAW,SAAUH,GACnB,OACEA,MAAOA,EAAMA,MACbE,MAAOd,EAAWe,UAAUJ,EAAQC,GAAQA,EAAME,SAGtDE,MAAO,SAAUC,EAAQL,GACvB,GAAIA,EAAMA,OAASX,EAAO,CACxB,GAAIgB,EAAOC,MAAM,MAAO,OAAQ,CAC9BN,EAAMA,MAAQV,CACd,OAAOK,GAASS,MAAMC,EAAQL,EAAME,WAC/B,CACLF,EAAMA,MAAQT,CACdS,GAAME,MAAQd,EAAWa,WAAWJ,EACpC,OAAOA,GAAUO,MAAMC,EAAQL,EAAME,YAElC,IAAIF,EAAMA,OAASV,EAAa,CACrC,GAAIiB,GAAMF,EAAOG,OAASH,EAAOC,MAAM,MAAO,MAC9C,IAAIG,GAAQd,EAASS,MAAMC,EAAQL,EAAME,MACzC,IAAIK,EAAK,CACPP,EAAMA,MAAQT,CACdS,GAAME,MAAQd,EAAWa,WAAWJ,GAEtC,MAAOY,OACF,CACL,MAAOZ,GAAUO,MAAMC,EAAQL,EAAME,SAGzCL,UAAW,SAAUG,GACnB,OAAQU,KAAMX,EAAQC,GAAQA,MAAOA,EAAME,QAE7CS,UAAW,SAAUX,GACnB,GAAIU,GAAOX,EAAQC,EACnB,IAAIU,EAAKC,UAAW,MAAOD,GAAKC,UAAUX,EAAME","file":"yaml-frontmatter.min.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../yaml/yaml\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../yaml/yaml\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function (CodeMirror) {\n\n  var START = 0, FRONTMATTER = 1, BODY = 2\n\n  // a mixed mode for Markdown text with an optional YAML front matter\n  CodeMirror.defineMode(\"yaml-frontmatter\", function (config, parserConfig) {\n    var yamlMode = CodeMirror.getMode(config, \"yaml\")\n    var innerMode = CodeMirror.getMode(config, parserConfig && parserConfig.base || \"gfm\")\n\n    function curMode(state) {\n      return state.state == BODY ? innerMode : yamlMode\n    }\n\n    return {\n      startState: function () {\n        return {\n          state: START,\n          inner: CodeMirror.startState(yamlMode)\n        }\n      },\n      copyState: function (state) {\n        return {\n          state: state.state,\n          inner: CodeMirror.copyState(curMode(state), state.inner)\n        }\n      },\n      token: function (stream, state) {\n        if (state.state == START) {\n          if (stream.match(/---/, false)) {\n            state.state = FRONTMATTER\n            return yamlMode.token(stream, state.inner)\n          } else {\n            state.state = BODY\n            state.inner = CodeMirror.startState(innerMode)\n            return innerMode.token(stream, state.inner)\n          }\n        } else if (state.state == FRONTMATTER) {\n          var end = stream.sol() && stream.match(/---/, false)\n          var style = yamlMode.token(stream, state.inner)\n          if (end) {\n            state.state = BODY\n            state.inner = CodeMirror.startState(innerMode)\n          }\n          return style\n        } else {\n          return innerMode.token(stream, state.inner)\n        }\n      },\n      innerMode: function (state) {\n        return {mode: curMode(state), state: state.inner}\n      },\n      blankLine: function (state) {\n        var mode = curMode(state)\n        if (mode.blankLine) return mode.blankLine(state.inner)\n      }\n    }\n  })\n});\n"]}