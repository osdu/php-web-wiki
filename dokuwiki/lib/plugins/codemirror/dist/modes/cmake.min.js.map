{"version":3,"sources":["../../node_modules/codemirror/mode/cmake/cmake.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","variable_regex","tokenString","stream","state","current","prev","found_var","eol","next","pending","backUp","continueString","tokenize","ch","match","skipToEnd","eatWhile","startState","inDefinition","inInclude","token","eatSpace","defineMIME"],"mappings":"CAGA,SAAUA,GACR,SAAWC,UAAW,gBAAmBC,SAAU,SACjDF,EAAIG,QAAQ,6BACT,UAAWC,SAAU,YAAcA,OAAOC,IAC7CD,QAAQ,wBAAyBJ,OAEjCA,GAAIM,cACL,SAASA,GACZ,YAEAA,GAAWC,WAAW,QAAS,WAC7B,GAAIC,GAAiB,uBAErB,SAASC,GAAYC,EAAQC,GAC3B,GAAIC,GAASC,EAAMC,EAAY,KAC/B,QAAQJ,EAAOK,QAAUH,EAAUF,EAAOM,SAAWL,EAAMM,QAAS,CAClE,GAAIL,IAAY,KAAOC,GAAQ,MAAQF,EAAMM,SAAW,IAAK,CAC3DH,EAAY,IACZ,OAEFD,EAAOD,EAET,GAAIE,EAAW,CACbJ,EAAOQ,OAAO,GAEhB,GAAIN,GAAWD,EAAMM,QAAS,CAC5BN,EAAMQ,eAAiB,UAClB,CACLR,EAAMQ,eAAiB,KAEzB,MAAO,SAGT,QAASC,GAASV,EAAQC,GACxB,GAAIU,GAAKX,EAAOM,MAGhB,IAAIK,IAAO,IAAK,CACd,GAAIX,EAAOY,MAAMd,GAAiB,CAChC,MAAO,aAET,MAAO,WAGT,GAAIG,EAAMQ,eAAgB,CAExBT,EAAOQ,OAAO,EACd,OAAOT,GAAYC,EAAQC,GAI7B,GAAID,EAAOY,MAAM,gBAAkBZ,EAAOY,MAAM,iBAAkB,CAChEZ,EAAOQ,OAAO,EACd,OAAO,MAET,GAAIG,GAAM,IAAK,CACbX,EAAOa,WACP,OAAO,UAGT,GAAIF,GAAM,KAAOA,GAAM,IAAK,CAE1BV,EAAMM,QAAUI,CAEhB,OAAOZ,GAAYC,EAAQC,GAE7B,GAAIU,GAAM,KAAOA,GAAM,IAAK,CAC1B,MAAO,UAET,GAAIA,EAAGC,MAAM,SAAU,CACrB,MAAO,SAETZ,EAAOc,SAAS,QAChB,OAAO,MAET,OACEC,WAAY,WACV,GAAId,KACJA,GAAMe,aAAe,KACrBf,GAAMgB,UAAY,KAClBhB,GAAMQ,eAAiB,KACvBR,GAAMM,QAAU,KAChB,OAAON,IAETiB,MAAO,SAAUlB,EAAQC,GACvB,GAAID,EAAOmB,WAAY,MAAO,KAC9B,OAAOT,GAASV,EAAQC,MAK9BL,GAAWwB,WAAW,eAAgB","file":"cmake.min.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd)\n    define([\"../../lib/codemirror\"], mod);\n  else\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"cmake\", function () {\n  var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;\n\n  function tokenString(stream, state) {\n    var current, prev, found_var = false;\n    while (!stream.eol() && (current = stream.next()) != state.pending) {\n      if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n        found_var = true;\n        break;\n      }\n      prev = current;\n    }\n    if (found_var) {\n      stream.backUp(1);\n    }\n    if (current == state.pending) {\n      state.continueString = false;\n    } else {\n      state.continueString = true;\n    }\n    return \"string\";\n  }\n\n  function tokenize(stream, state) {\n    var ch = stream.next();\n\n    // Have we found a variable?\n    if (ch === '$') {\n      if (stream.match(variable_regex)) {\n        return 'variable-2';\n      }\n      return 'variable';\n    }\n    // Should we still be looking for the end of a string?\n    if (state.continueString) {\n      // If so, go through the loop again\n      stream.backUp(1);\n      return tokenString(stream, state);\n    }\n    // Do we just have a function on our hands?\n    // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched\n    if (stream.match(/(\\s+)?\\w+\\(/) || stream.match(/(\\s+)?\\w+\\ \\(/)) {\n      stream.backUp(1);\n      return 'def';\n    }\n    if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    // Have we found a string?\n    if (ch == \"'\" || ch == '\"') {\n      // Store the type (single or double)\n      state.pending = ch;\n      // Perform the looping function to find the end\n      return tokenString(stream, state);\n    }\n    if (ch == '(' || ch == ')') {\n      return 'bracket';\n    }\n    if (ch.match(/[0-9]/)) {\n      return 'number';\n    }\n    stream.eatWhile(/[\\w-]/);\n    return null;\n  }\n  return {\n    startState: function () {\n      var state = {};\n      state.inDefinition = false;\n      state.inInclude = false;\n      state.continueString = false;\n      state.pending = false;\n      return state;\n    },\n    token: function (stream, state) {\n      if (stream.eatSpace()) return null;\n      return tokenize(stream, state);\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-cmake\", \"cmake\");\n\n});\n"]}