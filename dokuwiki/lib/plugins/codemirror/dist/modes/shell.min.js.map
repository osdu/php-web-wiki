{"version":3,"sources":["../../node_modules/codemirror/mode/shell/shell.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","words","style","string","split","i","length","tokenBase","stream","state","eatSpace","sol","ch","next","tokens","unshift","tokenString","tokenize","eat","skipToEnd","tokenDollar","eatWhile","test","eol","peek","cur","current","hasOwnProperty","quote","close","end","escaped","backUp","shift","startState","token","closeBrackets","lineComment","fold","defineMIME"],"mappings":"CAGA,SAAUA,GACR,SAAWC,UAAW,gBAAmBC,SAAU,SACjDF,EAAIG,QAAQ,6BACT,UAAWC,SAAU,YAAcA,OAAOC,IAC7CD,QAAQ,wBAAyBJ,OAEjCA,GAAIM,cACL,SAASA,GACZ,YAEAA,GAAWC,WAAW,QAAS,WAE7B,GAAIC,KACJ,SAASJ,GAAOK,EAAOC,GACrB,GAAIC,GAAQD,EAAOC,MAAM,IACzB,KAAI,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACpCJ,EAAMG,EAAMC,IAAMH,GAKtBL,EAAO,OAAQ,aAGfA,GAAO,UAAW,uDAChB,0CAGFA,GAAO,UAAW,0DAChB,yEACA,wEACA,uEACA,8CAEF,SAASU,GAAUC,EAAQC,GACzB,GAAID,EAAOE,WAAY,MAAO,KAE9B,IAAIC,GAAMH,EAAOG,KACjB,IAAIC,GAAKJ,EAAOK,MAEhB,IAAID,IAAO,KAAM,CACfJ,EAAOK,MACP,OAAO,MAET,GAAID,IAAO,KAAQA,IAAO,KAAOA,IAAO,IAAK,CAC3CH,EAAMK,OAAOC,QAAQC,EAAYJ,EAAIA,IAAO,IAAM,QAAU,UAC5D,OAAOK,GAAST,EAAQC,GAE1B,GAAIG,IAAO,IAAK,CACd,GAAID,GAAOH,EAAOU,IAAI,KAAM,CAC1BV,EAAOW,WACP,OAAO,OAETX,EAAOW,WACP,OAAO,UAET,GAAIP,IAAO,IAAK,CACdH,EAAMK,OAAOC,QAAQK,EACrB,OAAOH,GAAST,EAAQC,GAE1B,GAAIG,IAAO,KAAOA,IAAO,IAAK,CAC5B,MAAO,WAET,GAAIA,IAAO,IAAK,CACdJ,EAAOU,IAAI,IACXV,GAAOa,SAAS,KAChB,OAAO,YAET,GAAI,KAAKC,KAAKV,GAAK,CACjBJ,EAAOa,SAAS,KAChB,IAAGb,EAAOe,QAAU,KAAKD,KAAKd,EAAOgB,QAAS,CAC5C,MAAO,UAGXhB,EAAOa,SAAS,QAChB,IAAII,GAAMjB,EAAOkB,SACjB,IAAIlB,EAAOgB,SAAW,KAAO,MAAMF,KAAKG,GAAM,MAAO,KACrD,OAAOxB,GAAM0B,eAAeF,GAAOxB,EAAMwB,GAAO,KAGlD,QAAST,GAAYY,EAAO1B,GAC1B,GAAI2B,GAAQD,GAAS,IAAM,IAAMA,GAAS,IAAM,IAAMA,CACtD,OAAO,UAASpB,EAAQC,GACtB,GAAII,GAAMiB,EAAM,MAAOC,EAAU,KACjC,QAAQlB,EAAOL,EAAOK,SAAW,KAAM,CACrC,GAAIA,IAASgB,IAAUE,EAAS,CAC9BD,EAAM,IACN,OAEF,GAAIjB,IAAS,MAAQkB,GAAWH,IAAU,IAAK,CAC7CG,EAAU,IACVvB,GAAOwB,OAAO,EACdvB,GAAMK,OAAOC,QAAQK,EACrB,OAEF,IAAKW,GAAWlB,IAASe,GAASA,IAAUC,EAAO,CACjDpB,EAAMK,OAAOC,QAAQC,EAAYY,EAAO1B,GACxC,OAAOe,GAAST,EAAQC,GAE1BsB,GAAWA,GAAWlB,IAAS,KAEjC,GAAIiB,IAAQC,EAAStB,EAAMK,OAAOmB,OAClC,OAAO/B,IAIX,GAAIkB,GAAc,SAASZ,EAAQC,GACjC,GAAIA,EAAMK,OAAOR,OAAS,EAAGE,EAAOU,IAAI,IACxC,IAAIN,GAAKJ,EAAOK,MAChB,IAAI,SAASS,KAAKV,GAAK,CACrBH,EAAMK,OAAO,GAAKE,EAAYJ,EAAIA,GAAM,IAAM,QAAUA,GAAM,IAAM,MAAQ,SAC5E,OAAOK,GAAST,EAAQC,GAE1B,IAAK,KAAKa,KAAKV,GAAKJ,EAAOa,SAAS,KACpCZ,GAAMK,OAAOmB,OACb,OAAO,MAGT,SAAShB,GAAST,EAAQC,GACxB,OAAQA,EAAMK,OAAO,IAAMP,GAAYC,EAAQC,GAGjD,OACEyB,WAAY,WAAY,OAAQpB,YAChCqB,MAAO,SAAS3B,EAAQC,GACtB,MAAOQ,GAAST,EAAQC,IAE1B2B,cAAe,iBACfC,YAAa,IACbC,KAAM,UAIVvC,GAAWwC,WAAW,YAAa","file":"shell.min.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('shell', function() {\n\n  var words = {};\n  function define(style, string) {\n    var split = string.split(' ');\n    for(var i = 0; i < split.length; i++) {\n      words[split[i]] = style;\n    }\n  };\n\n  // Atoms\n  define('atom', 'true false');\n\n  // Keywords\n  define('keyword', 'if then do else elif while until for in esac fi fin ' +\n    'fil done exit set unset export function');\n\n  // Commands\n  define('builtin', 'ab awk bash beep cat cc cd chown chmod chroot clear cp ' +\n    'curl cut diff echo find gawk gcc get git grep kill killall ln ls make ' +\n    'mkdir openssl mv nc node npm ping ps restart rm rmdir sed service sh ' +\n    'shopt shred source sort sleep ssh start stop su sudo tee telnet top ' +\n    'touch vi vim wall wc wget who write yes zsh');\n\n  function tokenBase(stream, state) {\n    if (stream.eatSpace()) return null;\n\n    var sol = stream.sol();\n    var ch = stream.next();\n\n    if (ch === '\\\\') {\n      stream.next();\n      return null;\n    }\n    if (ch === '\\'' || ch === '\"' || ch === '`') {\n      state.tokens.unshift(tokenString(ch, ch === \"`\" ? \"quote\" : \"string\"));\n      return tokenize(stream, state);\n    }\n    if (ch === '#') {\n      if (sol && stream.eat('!')) {\n        stream.skipToEnd();\n        return 'meta'; // 'comment'?\n      }\n      stream.skipToEnd();\n      return 'comment';\n    }\n    if (ch === '$') {\n      state.tokens.unshift(tokenDollar);\n      return tokenize(stream, state);\n    }\n    if (ch === '+' || ch === '=') {\n      return 'operator';\n    }\n    if (ch === '-') {\n      stream.eat('-');\n      stream.eatWhile(/\\w/);\n      return 'attribute';\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/\\d/);\n      if(stream.eol() || !/\\w/.test(stream.peek())) {\n        return 'number';\n      }\n    }\n    stream.eatWhile(/[\\w-]/);\n    var cur = stream.current();\n    if (stream.peek() === '=' && /\\w+/.test(cur)) return 'def';\n    return words.hasOwnProperty(cur) ? words[cur] : null;\n  }\n\n  function tokenString(quote, style) {\n    var close = quote == \"(\" ? \")\" : quote == \"{\" ? \"}\" : quote\n    return function(stream, state) {\n      var next, end = false, escaped = false;\n      while ((next = stream.next()) != null) {\n        if (next === close && !escaped) {\n          end = true;\n          break;\n        }\n        if (next === '$' && !escaped && quote !== \"'\") {\n          escaped = true;\n          stream.backUp(1);\n          state.tokens.unshift(tokenDollar);\n          break;\n        }\n        if (!escaped && next === quote && quote !== close) {\n          state.tokens.unshift(tokenString(quote, style))\n          return tokenize(stream, state)\n        }\n        escaped = !escaped && next === '\\\\';\n      }\n      if (end || !escaped) state.tokens.shift();\n      return style;\n    };\n  };\n\n  var tokenDollar = function(stream, state) {\n    if (state.tokens.length > 1) stream.eat('$');\n    var ch = stream.next()\n    if (/['\"({]/.test(ch)) {\n      state.tokens[0] = tokenString(ch, ch == \"(\" ? \"quote\" : ch == \"{\" ? \"def\" : \"string\");\n      return tokenize(stream, state);\n    }\n    if (!/\\d/.test(ch)) stream.eatWhile(/\\w/);\n    state.tokens.shift();\n    return 'def';\n  };\n\n  function tokenize(stream, state) {\n    return (state.tokens[0] || tokenBase) (stream, state);\n  };\n\n  return {\n    startState: function() {return {tokens:[]};},\n    token: function(stream, state) {\n      return tokenize(stream, state);\n    },\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    lineComment: '#',\n    fold: \"brace\"\n  };\n});\n\nCodeMirror.defineMIME('text/x-sh', 'shell');\n\n});\n"]}