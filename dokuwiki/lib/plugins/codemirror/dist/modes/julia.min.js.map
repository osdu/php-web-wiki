{"version":3,"sources":["../../node_modules/codemirror/mode/julia/julia.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConf","wordRegexp","words","end","RegExp","join","octChar","hexChar","sChar","uChar","operators","delimiters","identifiers","chars","openers","closers","keywords","builtins","macro","symbol","stringPrefixes","inArray","state","inGenerator","bracket","curr","currentScope","prev","n","scopes","length","tokenBase","stream","match","tokenize","tokenComment","leavingExpr","sol","eatSpace","ch","peek","skipToEnd","push","scope","pop","lastToken","tokenAnnotation","imMatcher","numberLiteral","tokenChar","tokenStringFactory","current","isDefinition","callOrDef","next","firstParenPos","charsAdvanced","backUp","nestedLevels","isChar","value","parseInt","delimiter","substr","tokenString","eat","eatWhile","external","startState","token","style","indent","textAfter","delta","indentUnit","electricInput","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME"],"mappings":"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","file":"julia.min.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"julia\", function(config, parserConf) {\n  function wordRegexp(words, end) {\n    if (typeof end === \"undefined\") { end = \"\\\\b\"; }\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\" + end);\n  }\n\n  var octChar = \"\\\\\\\\[0-7]{1,3}\";\n  var hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\n  var sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\n  var uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\n\n  var operators = parserConf.operators || wordRegexp([\n      \"\\\\.?[\\\\\\\\%*+\\\\-<>!=\\\\/^]=?\", \"\\\\.?[|&\\\\u00F7\\\\u2260\\\\u2264\\\\u2265]\",\n      \"\\\\u00D7\", \"\\\\u2208\", \"\\\\u2209\", \"\\\\u220B\", \"\\\\u220C\", \"\\\\u2229\",\n      \"\\\\u222A\", \"\\\\u2286\", \"\\\\u2288\", \"\\\\u228A\", \"\\\\u22c5\", \"\\\\?\", \"~\", \":\",\n      \"\\\\$\", \"\\\\.[<>]\", \"<<=?\", \">>>?=?\", \"\\\\.[<>=]=\", \"->?\", \"\\\\/\\\\/\", \"=>\",\n      \"<:\", \"\\\\bin\\\\b(?!\\\\()\"], \"\");\n  var delimiters = parserConf.delimiters || /^[;,()[\\]{}]/;\n  var identifiers = parserConf.identifiers || /^[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\n\n  var chars = wordRegexp([octChar, hexChar, sChar, uChar], \"'\");\n  var openers = wordRegexp([\"begin\", \"function\", \"type\", \"immutable\", \"let\",\n      \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\",\n      \"finally\", \"catch\", \"do\"]);\n  var closers = wordRegexp([\"end\", \"else\", \"elseif\", \"catch\", \"finally\"]);\n  var keywords = wordRegexp([\"if\", \"else\", \"elseif\", \"while\", \"for\", \"begin\",\n      \"let\", \"end\", \"do\", \"try\", \"catch\", \"finally\", \"return\", \"break\",\n      \"continue\", \"global\", \"local\", \"const\", \"export\", \"import\", \"importall\",\n      \"using\", \"function\", \"macro\", \"module\", \"baremodule\", \"type\",\n      \"immutable\", \"quote\", \"typealias\", \"abstract\", \"bitstype\"]);\n  var builtins = wordRegexp([\"true\", \"false\", \"nothing\", \"NaN\", \"Inf\"]);\n\n  var macro = /^@[_A-Za-z][\\w]*/;\n  var symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\n  var stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\n\n  function inArray(state) {\n    return inGenerator(state, '[')\n  }\n\n  function inGenerator(state, bracket) {\n    var curr = currentScope(state),\n        prev = currentScope(state, 1);\n    if (typeof(bracket) === \"undefined\") { bracket = '('; }\n    if (curr === bracket || (prev === bracket && curr === \"for\")) {\n      return true;\n    }\n    return false;\n  }\n\n  function currentScope(state, n) {\n    if (typeof(n) === \"undefined\") { n = 0; }\n    if (state.scopes.length <= n) {\n      return null;\n    }\n    return state.scopes[state.scopes.length - (n + 1)];\n  }\n\n  // tokenizers\n  function tokenBase(stream, state) {\n    // Handle multiline comments\n    if (stream.match(/^#=/, false)) {\n      state.tokenize = tokenComment;\n      return state.tokenize(stream, state);\n    }\n\n    // Handle scope changes\n    var leavingExpr = state.leavingExpr;\n    if (stream.sol()) {\n      leavingExpr = false;\n    }\n    state.leavingExpr = false;\n\n    if (leavingExpr) {\n      if (stream.match(/^'+/)) {\n        return \"operator\";\n      }\n    }\n\n    if (stream.match(/^\\.{2,3}/)) {\n      return \"operator\";\n    }\n\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    var ch = stream.peek();\n\n    // Handle single line comments\n    if (ch === '#') {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (ch === '[') {\n      state.scopes.push('[');\n    }\n\n    if (ch === '(') {\n      state.scopes.push('(');\n    }\n\n    var scope = currentScope(state);\n\n    if (inArray(state) && ch === ']') {\n      if (scope === \"for\") { state.scopes.pop(); }\n      state.scopes.pop();\n      state.leavingExpr = true;\n    }\n\n    if (inGenerator(state) && ch === ')') {\n      if (scope === \"for\") { state.scopes.pop(); }\n      state.scopes.pop();\n      state.leavingExpr = true;\n    }\n\n    var match;\n    if (match = stream.match(openers, false)) {\n      state.scopes.push(match[0]);\n    }\n\n    if (stream.match(closers, false)) {\n      state.scopes.pop();\n    }\n\n    if (inArray(state)) {\n      if (state.lastToken == \"end\" && stream.match(/^:/)) {\n        return \"operator\";\n      }\n      if (stream.match(/^end/)) {\n        return \"number\";\n      }\n    }\n\n    // Handle type annotations\n    if (stream.match(/^::(?![:\\$])/)) {\n      state.tokenize = tokenAnnotation;\n      return state.tokenize(stream, state);\n    }\n\n    // Handle symbols\n    if (!leavingExpr && stream.match(symbol) || stream.match(/:\\./)) {\n      return \"builtin\";\n    }\n\n    // Handle parametric types\n    if (stream.match(/^{[^}]*}(?=\\()/)) {\n      return \"builtin\";\n    }\n\n    // Handle operators and Delimiters\n    if (stream.match(operators)) {\n      return \"operator\";\n    }\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.]/, false)) {\n      var imMatcher = RegExp(/^im\\b/);\n      var numberLiteral = false;\n      // Floats\n      if (stream.match(/^\\d*\\.(?!\\.)\\d*([Eef][\\+\\-]?\\d+)?/i)) { numberLiteral = true; }\n      if (stream.match(/^\\d+\\.(?!\\.)\\d*/)) { numberLiteral = true; }\n      if (stream.match(/^\\.\\d+/)) { numberLiteral = true; }\n      if (stream.match(/^0x\\.[0-9a-f]+p[\\+\\-]?\\d+/i)) { numberLiteral = true; }\n      // Integers\n      if (stream.match(/^0x[0-9a-f]+/i)) { numberLiteral = true; } // Hex\n      if (stream.match(/^0b[01]+/i)) { numberLiteral = true; } // Binary\n      if (stream.match(/^0o[0-7]+/i)) { numberLiteral = true; } // Octal\n      if (stream.match(/^[1-9]\\d*(e[\\+\\-]?\\d+)?/)) { numberLiteral = true; } // Decimal\n      // Zero by itself with no other piece of number.\n      if (stream.match(/^0(?![\\dx])/i)) { numberLiteral = true; }\n      if (numberLiteral) {\n          // Integer literals may be \"long\"\n          stream.match(imMatcher);\n          state.leavingExpr = true;\n          return \"number\";\n      }\n    }\n\n    // Handle Chars\n    if (stream.match(/^'/)) {\n      state.tokenize = tokenChar;\n      return state.tokenize(stream, state);\n    }\n\n    // Handle Strings\n    if (stream.match(stringPrefixes)) {\n      state.tokenize = tokenStringFactory(stream.current());\n      return state.tokenize(stream, state);\n    }\n\n    if (stream.match(macro)) {\n      return \"meta\";\n    }\n\n    if (stream.match(delimiters)) {\n      return null;\n    }\n\n    if (stream.match(keywords)) {\n      return \"keyword\";\n    }\n\n    if (stream.match(builtins)) {\n      return \"builtin\";\n    }\n\n    var isDefinition = state.isDefinition || state.lastToken == \"function\" ||\n                       state.lastToken == \"macro\" || state.lastToken == \"type\" ||\n                       state.lastToken == \"immutable\";\n\n    if (stream.match(identifiers)) {\n      if (isDefinition) {\n        if (stream.peek() === '.') {\n          state.isDefinition = true;\n          return \"variable\";\n        }\n        state.isDefinition = false;\n        return \"def\";\n      }\n      if (stream.match(/^({[^}]*})*\\(/, false)) {\n        return callOrDef(stream, state);\n      }\n      state.leavingExpr = true;\n      return \"variable\";\n    }\n\n    // Handle non-detected items\n    stream.next();\n    return \"error\";\n  }\n\n  function callOrDef(stream, state) {\n    var match = stream.match(/^(\\(\\s*)/);\n    if (match) {\n      if (state.firstParenPos < 0)\n        state.firstParenPos = state.scopes.length;\n      state.scopes.push('(');\n      state.charsAdvanced += match[1].length;\n    }\n    if (currentScope(state) == '(' && stream.match(/^\\)/)) {\n      state.scopes.pop();\n      state.charsAdvanced += 1;\n      if (state.scopes.length <= state.firstParenPos) {\n        var isDefinition = stream.match(/^\\s*?=(?!=)/, false);\n        stream.backUp(state.charsAdvanced);\n        state.firstParenPos = -1;\n        state.charsAdvanced = 0;\n        if (isDefinition)\n          return \"def\";\n        return \"builtin\";\n      }\n    }\n    // Unfortunately javascript does not support multiline strings, so we have\n    // to undo anything done upto here if a function call or definition splits\n    // over two or more lines.\n    if (stream.match(/^$/g, false)) {\n      stream.backUp(state.charsAdvanced);\n      while (state.scopes.length > state.firstParenPos)\n        state.scopes.pop();\n      state.firstParenPos = -1;\n      state.charsAdvanced = 0;\n      return \"builtin\";\n    }\n    state.charsAdvanced += stream.match(/^([^()]*)/)[1].length;\n    return callOrDef(stream, state);\n  }\n\n  function tokenAnnotation(stream, state) {\n    stream.match(/.*?(?=,|;|{|}|\\(|\\)|=|$|\\s)/);\n    if (stream.match(/^{/)) {\n      state.nestedLevels++;\n    } else if (stream.match(/^}/)) {\n      state.nestedLevels--;\n    }\n    if (state.nestedLevels > 0) {\n      stream.match(/.*?(?={|})/);\n    } else if (state.nestedLevels == 0) {\n      state.tokenize = tokenBase;\n    }\n    return \"builtin\";\n  }\n\n  function tokenComment(stream, state) {\n    if (stream.match(/^#=/)) {\n      state.nestedLevels++;\n    }\n    if (!stream.match(/.*?(?=(#=|=#))/)) {\n      stream.skipToEnd();\n    }\n    if (stream.match(/^=#/)) {\n      state.nestedLevels--;\n      if (state.nestedLevels == 0)\n        state.tokenize = tokenBase;\n    }\n    return \"comment\";\n  }\n\n  function tokenChar(stream, state) {\n    var isChar = false, match;\n    if (stream.match(chars)) {\n      isChar = true;\n    } else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\n      var value = parseInt(match[1], 16);\n      if (value <= 55295 || value >= 57344) { // (U+0,U+D7FF), (U+E000,U+FFFF)\n        isChar = true;\n        stream.next();\n      }\n    } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\n      var value = parseInt(match[1], 16);\n      if (value <= 1114111) { // U+10FFFF\n        isChar = true;\n        stream.next();\n      }\n    }\n    if (isChar) {\n      state.leavingExpr = true;\n      state.tokenize = tokenBase;\n      return \"string\";\n    }\n    if (!stream.match(/^[^']+(?=')/)) { stream.skipToEnd(); }\n    if (stream.match(/^'/)) { state.tokenize = tokenBase; }\n    return \"error\";\n  }\n\n  function tokenStringFactory(delimiter) {\n    if (delimiter.substr(-3) === '\"\"\"') {\n      delimiter = '\"\"\"';\n    } else if (delimiter.substr(-1) === '\"') {\n      delimiter = '\"';\n    }\n    function tokenString(stream, state) {\n      if (stream.eat('\\\\')) {\n        stream.next();\n      } else if (stream.match(delimiter)) {\n        state.tokenize = tokenBase;\n        state.leavingExpr = true;\n        return \"string\";\n      } else {\n        stream.eat(/[`\"]/);\n      }\n      stream.eatWhile(/[^\\\\`\"]/);\n      return \"string\";\n    }\n    return tokenString;\n  }\n\n  var external = {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        scopes: [],\n        lastToken: null,\n        leavingExpr: false,\n        isDefinition: false,\n        nestedLevels: 0,\n        charsAdvanced: 0,\n        firstParenPos: -1\n      };\n    },\n\n    token: function(stream, state) {\n      var style = state.tokenize(stream, state);\n      var current = stream.current();\n\n      if (current && style) {\n        state.lastToken = current;\n      }\n\n      // Handle '.' connected identifiers\n      if (current === '.') {\n        style = stream.match(identifiers, false) || stream.match(macro, false) ||\n                stream.match(/\\(/, false) ? \"operator\" : \"error\";\n      }\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var delta = 0;\n      if ( textAfter === ']' || textAfter === ')' || textAfter === \"end\" ||\n           textAfter === \"else\" || textAfter === \"catch\" || textAfter === \"elseif\" ||\n           textAfter === \"finally\" ) {\n        delta = -1;\n      }\n      return (state.scopes.length + delta) * config.indentUnit;\n    },\n\n    electricInput: /\\b(end|else|catch|finally)\\b/,\n    blockCommentStart: \"#=\",\n    blockCommentEnd: \"=#\",\n    lineComment: \"#\",\n    fold: \"indent\"\n  };\n  return external;\n});\n\n\nCodeMirror.defineMIME(\"text/x-julia\", \"julia\");\n\n});\n"]}