{"version":3,"sources":["../../node_modules/codemirror/mode/toml/toml.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","startState","inString","stringType","lhs","inArray","token","stream","state","peek","next","sol","eol","match","skipTo","skipToEnd","eatSpace","eatWhile","c","defineMIME"],"mappings":"CAGA,SAAUA,GACR,SAAWC,UAAW,gBAAmBC,SAAU,SACjDF,EAAIG,QAAQ,6BACT,UAAWC,SAAU,YAAcA,OAAOC,IAC7CD,QAAQ,wBAAyBJ,OAEjCA,GAAIM,cACL,SAASA,GACZ,YAEAA,GAAWC,WAAW,OAAQ,WAC5B,OACEC,WAAY,WACV,OACEC,SAAU,MACVC,WAAY,GACZC,IAAK,KACLC,QAAS,IAGbC,MAAO,SAAUC,EAAQC,GAEvB,IAAKA,EAAMN,WAAcK,EAAOE,QAAU,KAASF,EAAOE,QAAU,KAAO,CACzED,EAAML,WAAaI,EAAOE,MAC1BF,GAAOG,MACPF,GAAMN,SAAW,KAEnB,GAAIK,EAAOI,OAASH,EAAMH,UAAY,EAAG,CACvCG,EAAMJ,IAAM,KAGd,GAAII,EAAMN,SAAU,CAClB,MAAOM,EAAMN,WAAaK,EAAOK,MAAO,CACtC,GAAIL,EAAOE,SAAWD,EAAML,WAAY,CACtCI,EAAOG,MACPF,GAAMN,SAAW,UACZ,IAAIK,EAAOE,SAAW,KAAM,CACjCF,EAAOG,MACPH,GAAOG,WACF,CACLH,EAAOM,MAAM,iBAGjB,MAAOL,GAAMJ,IAAM,kBAAoB,aAClC,IAAII,EAAMH,SAAWE,EAAOE,SAAW,IAAK,CACjDF,EAAOG,MACPF,GAAMH,SACN,OAAO,cACF,IAAIG,EAAMJ,KAAOG,EAAOE,SAAW,KAAOF,EAAOO,OAAO,KAAM,CACnEP,EAAOG,MAEP,IAAIH,EAAOE,SAAW,IAAKF,EAAOG,MAClC,OAAO,WACF,IAAIH,EAAOE,SAAW,IAAK,CAChCF,EAAOQ,WACP,OAAO,cACF,IAAIR,EAAOS,WAAY,CAC5B,MAAO,UACF,IAAIR,EAAMJ,KAAOG,EAAOU,SAAS,SAAUC,GAAK,MAAOA,IAAK,KAAOA,GAAK,MAAS,CACtF,MAAO,eACF,IAAIV,EAAMJ,KAAOG,EAAOE,SAAW,IAAK,CAC7CF,EAAOG,MACPF,GAAMJ,IAAM,KACZ,OAAO,UACF,KAAKI,EAAMJ,KAAOG,EAAOM,MAAM,0BAA2B,CAC/D,MAAO,WACF,KAAKL,EAAMJ,MAAQG,EAAOM,MAAM,SAAWN,EAAOM,MAAM,UAAW,CACxE,MAAO,WACF,KAAKL,EAAMJ,KAAOG,EAAOE,SAAW,IAAK,CAC9CD,EAAMH,SACNE,GAAOG,MACP,OAAO,cACF,KAAKF,EAAMJ,KAAOG,EAAOM,MAAM,qBAAsB,CAC1D,MAAO,aACF,KAAKN,EAAOS,WAAY,CAC7BT,EAAOG,OAET,MAAO,SAKbX,GAAWoB,WAAW,cAAe","file":"toml.min.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"toml\", function () {\n  return {\n    startState: function () {\n      return {\n        inString: false,\n        stringType: \"\",\n        lhs: true,\n        inArray: 0\n      };\n    },\n    token: function (stream, state) {\n      //check for state changes\n      if (!state.inString && ((stream.peek() == '\"') || (stream.peek() == \"'\"))) {\n        state.stringType = stream.peek();\n        stream.next(); // Skip quote\n        state.inString = true; // Update state\n      }\n      if (stream.sol() && state.inArray === 0) {\n        state.lhs = true;\n      }\n      //return state\n      if (state.inString) {\n        while (state.inString && !stream.eol()) {\n          if (stream.peek() === state.stringType) {\n            stream.next(); // Skip quote\n            state.inString = false; // Clear flag\n          } else if (stream.peek() === '\\\\') {\n            stream.next();\n            stream.next();\n          } else {\n            stream.match(/^.[^\\\\\\\"\\']*/);\n          }\n        }\n        return state.lhs ? \"property string\" : \"string\"; // Token style\n      } else if (state.inArray && stream.peek() === ']') {\n        stream.next();\n        state.inArray--;\n        return 'bracket';\n      } else if (state.lhs && stream.peek() === '[' && stream.skipTo(']')) {\n        stream.next();//skip closing ]\n        // array of objects has an extra open & close []\n        if (stream.peek() === ']') stream.next();\n        return \"atom\";\n      } else if (stream.peek() === \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (stream.eatSpace()) {\n        return null;\n      } else if (state.lhs && stream.eatWhile(function (c) { return c != '=' && c != ' '; })) {\n        return \"property\";\n      } else if (state.lhs && stream.peek() === \"=\") {\n        stream.next();\n        state.lhs = false;\n        return null;\n      } else if (!state.lhs && stream.match(/^\\d\\d\\d\\d[\\d\\-\\:\\.T]*Z/)) {\n        return 'atom'; //date\n      } else if (!state.lhs && (stream.match('true') || stream.match('false'))) {\n        return 'atom';\n      } else if (!state.lhs && stream.peek() === '[') {\n        state.inArray++;\n        stream.next();\n        return 'bracket';\n      } else if (!state.lhs && stream.match(/^\\-?\\d+(?:\\.\\d+)?/)) {\n        return 'number';\n      } else if (!stream.eatSpace()) {\n        stream.next();\n      }\n      return null;\n    }\n  };\n});\n\nCodeMirror.defineMIME('text/x-toml', 'toml');\n\n});\n"]}