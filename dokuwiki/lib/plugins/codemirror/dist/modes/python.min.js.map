{"version":3,"sources":["../../node_modules/codemirror/mode/python/python.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","wordRegexp","words","RegExp","join","wordOperators","commonKeywords","commonBuiltins","registerHelper","concat","top","state","scopes","length","defineMode","conf","parserConf","ERRORCLASS","singleDelimiters","doubleOperators","doubleDelimiters","tripleDelimiters","hangingIndent","indentUnit","myKeywords","myBuiltins","extra_keywords","undefined","extra_builtins","py3","version","Number","singleOperators","identifiers","stringPrefixes","keywords","builtins","tokenBase","stream","sol","indent","indentation","type","scopeOffset","offset","eatSpace","lineOffset","pushPyScope","dedent","peek","errorToken","style","tokenBaseInner","ch","skipToEnd","match","floatLiteral","eat","intLiteral","tokenize","tokenStringFactory","current","lastToken","next","delimiter","indexOf","charAt","toLowerCase","substr","singleline","OUTCLASS","tokenString","eol","eatWhile","singleLineStringErrors","isString","pop","push","align","pushBracketScope","column","indented","tokenLexer","beginningOfLine","test","lambda","delimiter_index","slice","external","startState","basecolumn","token","addErr","textAfter","Pass","scope","closing","electricInput","closeBrackets","triples","lineComment","fold","defineMIME","str","split","name"],"mappings":"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","file":"python.min.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\n  var commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\",\n                        \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\",\n                        \"for\", \"from\", \"global\", \"if\", \"import\",\n                        \"lambda\", \"pass\", \"raise\", \"return\",\n                        \"try\", \"while\", \"with\", \"yield\", \"in\"];\n  var commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\",\n                        \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\",\n                        \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\",\n                        \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\",\n                        \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\",\n                        \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\",\n                        \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\",\n                        \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\",\n                        \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\",\n                        \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\",\n                        \"Ellipsis\", \"__debug__\"];\n  CodeMirror.registerHelper(\"hintWords\", \"python\", commonKeywords.concat(commonBuiltins));\n\n  function top(state) {\n    return state.scopes[state.scopes.length - 1];\n  }\n\n  CodeMirror.defineMode(\"python\", function(conf, parserConf) {\n    var ERRORCLASS = \"error\";\n\n    var singleDelimiters = parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]/;\n    var doubleOperators = parserConf.doubleOperators || /^([!<>]==|<>|<<|>>|\\/\\/|\\*\\*)/;\n    var doubleDelimiters = parserConf.doubleDelimiters || /^(\\+=|\\-=|\\*=|%=|\\/=|&=|\\|=|\\^=)/;\n    var tripleDelimiters = parserConf.tripleDelimiters || /^(\\/\\/=|>>=|<<=|\\*\\*=)/;\n\n    var hangingIndent = parserConf.hangingIndent || conf.indentUnit;\n\n    var myKeywords = commonKeywords, myBuiltins = commonBuiltins;\n    if (parserConf.extra_keywords != undefined)\n      myKeywords = myKeywords.concat(parserConf.extra_keywords);\n\n    if (parserConf.extra_builtins != undefined)\n      myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n\n    var py3 = !(parserConf.version && Number(parserConf.version) < 3)\n    if (py3) {\n      // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n      var singleOperators = parserConf.singleOperators || /^[\\+\\-\\*\\/%&|\\^~<>!@]/;\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n      myKeywords = myKeywords.concat([\"nonlocal\", \"False\", \"True\", \"None\", \"async\", \"await\"]);\n      myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n      var stringPrefixes = new RegExp(\"^(([rbuf]|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    } else {\n      var singleOperators = parserConf.singleOperators || /^[\\+\\-\\*\\/%&|\\^~<>!]/;\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;\n      myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n      myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\",\n                                      \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\",\n                                      \"unichr\", \"unicode\", \"xrange\", \"False\", \"True\", \"None\"]);\n      var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    }\n    var keywords = wordRegexp(myKeywords);\n    var builtins = wordRegexp(myBuiltins);\n\n    // tokenizers\n    function tokenBase(stream, state) {\n      if (stream.sol()) state.indent = stream.indentation()\n      // Handle scope changes\n      if (stream.sol() && top(state).type == \"py\") {\n        var scopeOffset = top(state).offset;\n        if (stream.eatSpace()) {\n          var lineOffset = stream.indentation();\n          if (lineOffset > scopeOffset)\n            pushPyScope(state);\n          else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\")\n            state.errorToken = true;\n          return null;\n        } else {\n          var style = tokenBaseInner(stream, state);\n          if (scopeOffset > 0 && dedent(stream, state))\n            style += \" \" + ERRORCLASS;\n          return style;\n        }\n      }\n      return tokenBaseInner(stream, state);\n    }\n\n    function tokenBaseInner(stream, state) {\n      if (stream.eatSpace()) return null;\n\n      var ch = stream.peek();\n\n      // Handle Comments\n      if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      // Handle Number Literals\n      if (stream.match(/^[0-9\\.]/, false)) {\n        var floatLiteral = false;\n        // Floats\n        if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) { floatLiteral = true; }\n        if (stream.match(/^[\\d_]+\\.\\d*/)) { floatLiteral = true; }\n        if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n        if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.eat(/J/i);\n          return \"number\";\n        }\n        // Integers\n        var intLiteral = false;\n        // Hex\n        if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;\n        // Binary\n        if (stream.match(/^0b[01_]+/i)) intLiteral = true;\n        // Octal\n        if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;\n        // Decimal\n        if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n          // Decimal literals may be \"imaginary\"\n          stream.eat(/J/i);\n          // TODO - Can you have imaginary longs?\n          intLiteral = true;\n        }\n        // Zero by itself with no other piece of number.\n        if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n        if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.eat(/L/i);\n          return \"number\";\n        }\n      }\n\n      // Handle Strings\n      if (stream.match(stringPrefixes)) {\n        state.tokenize = tokenStringFactory(stream.current());\n        return state.tokenize(stream, state);\n      }\n\n      // Handle operators and Delimiters\n      if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters))\n        return \"punctuation\";\n\n      if (stream.match(doubleOperators) || stream.match(singleOperators))\n        return \"operator\";\n\n      if (stream.match(singleDelimiters))\n        return \"punctuation\";\n\n      if (state.lastToken == \".\" && stream.match(identifiers))\n        return \"property\";\n\n      if (stream.match(keywords) || stream.match(wordOperators))\n        return \"keyword\";\n\n      if (stream.match(builtins))\n        return \"builtin\";\n\n      if (stream.match(/^(self|cls)\\b/))\n        return \"variable-2\";\n\n      if (stream.match(identifiers)) {\n        if (state.lastToken == \"def\" || state.lastToken == \"class\")\n          return \"def\";\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return ERRORCLASS;\n    }\n\n    function tokenStringFactory(delimiter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n        delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol())\n              return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenBase;\n            return OUTCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors)\n            return ERRORCLASS;\n          else\n            state.tokenize = tokenBase;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function pushPyScope(state) {\n      while (top(state).type != \"py\") state.scopes.pop()\n      state.scopes.push({offset: top(state).offset + conf.indentUnit,\n                         type: \"py\",\n                         align: null})\n    }\n\n    function pushBracketScope(stream, state, type) {\n      var align = stream.match(/^([\\s\\[\\{\\(]|#.*)*$/, false) ? null : stream.column() + 1\n      state.scopes.push({offset: state.indent + hangingIndent,\n                         type: type,\n                         align: align})\n    }\n\n    function dedent(stream, state) {\n      var indented = stream.indentation();\n      while (state.scopes.length > 1 && top(state).offset > indented) {\n        if (top(state).type != \"py\") return true;\n        state.scopes.pop();\n      }\n      return top(state).offset != indented;\n    }\n\n    function tokenLexer(stream, state) {\n      if (stream.sol()) state.beginningOfLine = true;\n\n      var style = state.tokenize(stream, state);\n      var current = stream.current();\n\n      // Handle decorators\n      if (state.beginningOfLine && current == \"@\")\n        return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n\n      if (/\\S/.test(current)) state.beginningOfLine = false;\n\n      if ((style == \"variable\" || style == \"builtin\")\n          && state.lastToken == \"meta\")\n        style = \"meta\";\n\n      // Handle scope changes.\n      if (current == \"pass\" || current == \"return\")\n        state.dedent += 1;\n\n      if (current == \"lambda\") state.lambda = true;\n      if (current == \":\" && !state.lambda && top(state).type == \"py\")\n        pushPyScope(state);\n\n      var delimiter_index = current.length == 1 ? \"[({\".indexOf(current) : -1;\n      if (delimiter_index != -1)\n        pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n\n      delimiter_index = \"])}\".indexOf(current);\n      if (delimiter_index != -1) {\n        if (top(state).type == current) state.indent = state.scopes.pop().offset - hangingIndent\n        else return ERRORCLASS;\n      }\n      if (state.dedent > 0 && stream.eol() && top(state).type == \"py\") {\n        if (state.scopes.length > 1) state.scopes.pop();\n        state.dedent -= 1;\n      }\n\n      return style;\n    }\n\n    var external = {\n      startState: function(basecolumn) {\n        return {\n          tokenize: tokenBase,\n          scopes: [{offset: basecolumn || 0, type: \"py\", align: null}],\n          indent: basecolumn || 0,\n          lastToken: null,\n          lambda: false,\n          dedent: 0\n        };\n      },\n\n      token: function(stream, state) {\n        var addErr = state.errorToken;\n        if (addErr) state.errorToken = false;\n        var style = tokenLexer(stream, state);\n\n        if (style && style != \"comment\")\n          state.lastToken = (style == \"keyword\" || style == \"punctuation\") ? stream.current() : style;\n        if (style == \"punctuation\") style = null;\n\n        if (stream.eol() && state.lambda)\n          state.lambda = false;\n        return addErr ? style + \" \" + ERRORCLASS : style;\n      },\n\n      indent: function(state, textAfter) {\n        if (state.tokenize != tokenBase)\n          return state.tokenize.isString ? CodeMirror.Pass : 0;\n\n        var scope = top(state), closing = scope.type == textAfter.charAt(0)\n        if (scope.align != null)\n          return scope.align - (closing ? 1 : 0)\n        else\n          return scope.offset - (closing ? hangingIndent : 0)\n      },\n\n      electricInput: /^\\s*[\\}\\]\\)]$/,\n      closeBrackets: {triples: \"'\\\"\"},\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n\n  CodeMirror.defineMIME(\"text/x-python\", \"python\");\n\n  var words = function(str) { return str.split(\" \"); };\n\n  CodeMirror.defineMIME(\"text/x-cython\", {\n    name: \"python\",\n    extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except\"+\n                          \"extern gil include nogil property public\"+\n                          \"readonly struct union DEF IF ELIF ELSE\")\n  });\n\n});\n"]}