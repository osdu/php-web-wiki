{"version":3,"sources":["../../node_modules/codemirror/mode/mllike/mllike.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","_config","parserConfig","words","let","rec","in","of","and","if","then","else","for","to","while","do","done","fun","function","val","type","mutable","match","with","try","open","ignore","begin","end","extraWords","prop","hasOwnProperty","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","commentLevel","tokenComment","eatWhile","slashComments","skipToEnd","test","cur","current","escaped","prev","startState","token","eatSpace","blockCommentStart","blockCommentEnd","lineComment","defineMIME","name","succ","trace","exit","print_string","print_endline","true","false","raise","abstract","as","assert","base","class","default","delegate","downcast","downto","elif","exception","extern","finally","global","inherit","inline","interface","internal","lazy","let!","member","namespace","new","null","override","private","public","return","return!","select","static","struct","upcast","use","use!","when","yield","yield!","List","Seq","Map","Set","int","string","failwith","not"],"mappings":"CAGA,SAAUA,GACR,SAAWC,UAAW,gBAAmBC,SAAU,SACjDF,EAAIG,QAAQ,6BACT,UAAWC,SAAU,YAAcA,OAAOC,IAC7CD,QAAQ,wBAAyBJ,OAEjCA,GAAIM,cACL,SAASA,GACZ,YAEAA,GAAWC,WAAW,SAAU,SAASC,EAASC,GAChD,GAAIC,IACFC,MAAO,UACPC,IAAO,UACPC,KAAM,UACNC,GAAM,UACNC,IAAO,UACPC,KAAM,UACNC,KAAQ,UACRC,OAAQ,UACRC,MAAO,UACPC,GAAM,UACNC,QAAS,UACTC,KAAM,UACNC,KAAQ,UACRC,IAAO,UACPC,WAAY,UACZC,IAAO,UACPC,KAAQ,UACRC,QAAW,UACXC,MAAS,UACTC,OAAQ,UACRC,MAAO,UACPC,KAAQ,UACRC,OAAU,UACVC,MAAS,UACTC,IAAO,UAGT,IAAIC,GAAa3B,EAAa2B,cAC9B,KAAK,GAAIC,KAAQD,GAAY,CAC3B,GAAIA,EAAWE,eAAeD,GAAO,CACnC3B,EAAM2B,GAAQ5B,EAAa2B,WAAWC,IAI1C,QAASE,GAAUC,EAAQC,GACzB,GAAIC,GAAKF,EAAOG,MAEhB,IAAID,IAAO,IAAK,CACdD,EAAMG,SAAWC,CACjB,OAAOJ,GAAMG,SAASJ,EAAQC,GAEhC,GAAIC,IAAO,IAAK,CACd,GAAIF,EAAOM,IAAI,KAAM,CACnBL,EAAMM,cACNN,GAAMG,SAAWI,CACjB,OAAOP,GAAMG,SAASJ,EAAQC,IAGlC,GAAIC,IAAO,IAAK,CACdF,EAAOS,SAAS,KAChB,OAAO,aAET,GAAIP,IAAO,IAAK,CACdF,EAAOS,SAAS,KAChB,OAAO,QAET,GAAIP,IAAO,KAAOjC,EAAayC,eAAiBV,EAAOM,IAAI,KAAM,CAC/DN,EAAOW,WACP,OAAO,UAET,GAAI,KAAKC,KAAKV,GAAK,CACjBF,EAAOS,SAAS,OAChB,IAAIT,EAAOM,IAAI,KAAM,CACnBN,EAAOS,SAAS,QAElB,MAAO,SAET,GAAK,iBAAiBG,KAAKV,GAAK,CAC9B,MAAO,WAET,GAAI,kBAAkBU,KAAKV,GAAK,CAC9BF,EAAOS,SAAS,kBAChB,IAAII,GAAMb,EAAOc,SACjB,OAAO5C,GAAM4B,eAAee,GAAO3C,EAAM2C,GAAO,WAElD,MAAO,MAGT,QAASR,GAAYL,EAAQC,GAC3B,GAAIE,GAAMR,EAAM,MAAOoB,EAAU,KACjC,QAAQZ,EAAOH,EAAOG,SAAW,KAAM,CACrC,GAAIA,IAAS,MAAQY,EAAS,CAC5BpB,EAAM,IACN,OAEFoB,GAAWA,GAAWZ,IAAS,KAEjC,GAAIR,IAAQoB,EAAS,CACnBd,EAAMG,SAAWL,EAEnB,MAAO,SAGT,QAASS,GAAaR,EAAQC,GAC5B,GAAIe,GAAMb,CACV,OAAMF,EAAMM,aAAe,IAAMJ,EAAOH,EAAOG,SAAW,KAAM,CAC9D,GAAIa,IAAS,KAAOb,IAAS,IAAKF,EAAMM,cACxC,IAAIS,IAAS,KAAOb,IAAS,IAAKF,EAAMM,cACxCS,GAAOb,EAET,GAAIF,EAAMM,cAAgB,EAAG,CAC3BN,EAAMG,SAAWL,EAEnB,MAAO,UAGT,OACEkB,WAAY,WAAY,OAAQb,SAAUL,EAAWQ,aAAc,IACnEW,MAAO,SAASlB,EAAQC,GACtB,GAAID,EAAOmB,WAAY,MAAO,KAC9B,OAAOlB,GAAMG,SAASJ,EAAQC,IAGhCmB,kBAAmB,KACnBC,gBAAiB,KACjBC,YAAarD,EAAayC,cAAgB,KAAO,OAIrD5C,GAAWyD,WAAW,gBACpBC,KAAM,SACN5B,YACE6B,KAAQ,UACRC,MAAS,UACTC,KAAQ,UACRC,aAAgB,UAChBC,cAAiB,UACjBC,OAAQ,OACRC,QAAS,OACTC,MAAS,YAIblE,GAAWyD,WAAW,iBACpBC,KAAM,SACN5B,YACEqC,WAAY,UACZC,GAAM,UACNC,OAAU,UACVC,KAAQ,UACRC,QAAS,UACTC,UAAW,UACXC,SAAY,UACZC,SAAY,UACZC,OAAU,UACVC,KAAQ,UACRC,UAAa,UACbC,OAAU,UACVC,UAAW,UACXC,OAAU,UACVC,QAAW,UACXC,OAAU,UACVC,YAAa,UACbC,SAAY,UACZC,KAAQ,UACRC,OAAQ,UACRC,OAAW,UACX3F,OAAU,UACV4F,UAAa,UACbC,MAAO,UACPC,OAAQ,UACRC,SAAY,UACZC,UAAW,UACXC,SAAU,UACVC,SAAU,UACVC,UAAW,UACXC,OAAU,UACVC,SAAU,UACVC,OAAU,UACVC,OAAU,UACVC,IAAO,UACPC,OAAQ,UACRjF,IAAO,UACPkF,KAAQ,UACRC,QAAS,UACTC,SAAU,UAEVC,KAAQ,UACRC,IAAO,UACPC,IAAO,UACPC,IAAO,UACPC,MAAO,UACPC,OAAU,UACV5C,MAAS,UACT6C,SAAY,UACZC,IAAO,UACPhD,OAAQ,UACRC,QAAS,WAEXrB,cAAe","file":"mllike.min.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('mllike', function(_config, parserConfig) {\n  var words = {\n    'let': 'keyword',\n    'rec': 'keyword',\n    'in': 'keyword',\n    'of': 'keyword',\n    'and': 'keyword',\n    'if': 'keyword',\n    'then': 'keyword',\n    'else': 'keyword',\n    'for': 'keyword',\n    'to': 'keyword',\n    'while': 'keyword',\n    'do': 'keyword',\n    'done': 'keyword',\n    'fun': 'keyword',\n    'function': 'keyword',\n    'val': 'keyword',\n    'type': 'keyword',\n    'mutable': 'keyword',\n    'match': 'keyword',\n    'with': 'keyword',\n    'try': 'keyword',\n    'open': 'builtin',\n    'ignore': 'builtin',\n    'begin': 'keyword',\n    'end': 'keyword'\n  };\n\n  var extraWords = parserConfig.extraWords || {};\n  for (var prop in extraWords) {\n    if (extraWords.hasOwnProperty(prop)) {\n      words[prop] = parserConfig.extraWords[prop];\n    }\n  }\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    if (ch === '\"') {\n      state.tokenize = tokenString;\n      return state.tokenize(stream, state);\n    }\n    if (ch === '(') {\n      if (stream.eat('*')) {\n        state.commentLevel++;\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      }\n    }\n    if (ch === '~') {\n      stream.eatWhile(/\\w/);\n      return 'variable-2';\n    }\n    if (ch === '`') {\n      stream.eatWhile(/\\w/);\n      return 'quote';\n    }\n    if (ch === '/' && parserConfig.slashComments && stream.eat('/')) {\n      stream.skipToEnd();\n      return 'comment';\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\d]/);\n      if (stream.eat('.')) {\n        stream.eatWhile(/[\\d]/);\n      }\n      return 'number';\n    }\n    if ( /[+\\-*&%=<>!?|]/.test(ch)) {\n      return 'operator';\n    }\n    if (/[\\w\\xa1-\\uffff]/.test(ch)) {\n      stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n      var cur = stream.current();\n      return words.hasOwnProperty(cur) ? words[cur] : 'variable';\n    }\n    return null\n  }\n\n  function tokenString(stream, state) {\n    var next, end = false, escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === '\"' && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    if (end && !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  };\n\n  function tokenComment(stream, state) {\n    var prev, next;\n    while(state.commentLevel > 0 && (next = stream.next()) != null) {\n      if (prev === '(' && next === '*') state.commentLevel++;\n      if (prev === '*' && next === ')') state.commentLevel--;\n      prev = next;\n    }\n    if (state.commentLevel <= 0) {\n      state.tokenize = tokenBase;\n    }\n    return 'comment';\n  }\n\n  return {\n    startState: function() {return {tokenize: tokenBase, commentLevel: 0};},\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    },\n\n    blockCommentStart: \"(*\",\n    blockCommentEnd: \"*)\",\n    lineComment: parserConfig.slashComments ? \"//\" : null\n  };\n});\n\nCodeMirror.defineMIME('text/x-ocaml', {\n  name: 'mllike',\n  extraWords: {\n    'succ': 'keyword',\n    'trace': 'builtin',\n    'exit': 'builtin',\n    'print_string': 'builtin',\n    'print_endline': 'builtin',\n    'true': 'atom',\n    'false': 'atom',\n    'raise': 'keyword'\n  }\n});\n\nCodeMirror.defineMIME('text/x-fsharp', {\n  name: 'mllike',\n  extraWords: {\n    'abstract': 'keyword',\n    'as': 'keyword',\n    'assert': 'keyword',\n    'base': 'keyword',\n    'class': 'keyword',\n    'default': 'keyword',\n    'delegate': 'keyword',\n    'downcast': 'keyword',\n    'downto': 'keyword',\n    'elif': 'keyword',\n    'exception': 'keyword',\n    'extern': 'keyword',\n    'finally': 'keyword',\n    'global': 'keyword',\n    'inherit': 'keyword',\n    'inline': 'keyword',\n    'interface': 'keyword',\n    'internal': 'keyword',\n    'lazy': 'keyword',\n    'let!': 'keyword',\n    'member' : 'keyword',\n    'module': 'keyword',\n    'namespace': 'keyword',\n    'new': 'keyword',\n    'null': 'keyword',\n    'override': 'keyword',\n    'private': 'keyword',\n    'public': 'keyword',\n    'return': 'keyword',\n    'return!': 'keyword',\n    'select': 'keyword',\n    'static': 'keyword',\n    'struct': 'keyword',\n    'upcast': 'keyword',\n    'use': 'keyword',\n    'use!': 'keyword',\n    'val': 'keyword',\n    'when': 'keyword',\n    'yield': 'keyword',\n    'yield!': 'keyword',\n\n    'List': 'builtin',\n    'Seq': 'builtin',\n    'Map': 'builtin',\n    'Set': 'builtin',\n    'int': 'builtin',\n    'string': 'builtin',\n    'raise': 'builtin',\n    'failwith': 'builtin',\n    'not': 'builtin',\n    'true': 'builtin',\n    'false': 'builtin'\n  },\n  slashComments: true\n});\n\n});\n"]}