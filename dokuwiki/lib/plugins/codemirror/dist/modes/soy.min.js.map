{"version":3,"sources":["../../node_modules/codemirror/mode/soy/soy.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","indentingTags","defineMode","config","textMode","getMode","modes","html","name","multilineTagIndentFactor","multilineTagIndentPastTag","attributes","text","uri","css","js","statementIndent","indentUnit","last","array","length","tokenUntil","stream","state","untilRegExp","sol","indent","eat","oldString","string","match","exec","substr","pos","index","result","hideFirstChars","localState","localStates","mode","token","contains","list","element","next","prepend","ref","loose","popscope","scopes","variables","startState","kind","kindTag","soyState","templates","copyState","tag","concat","map","pop","skipToEnd","push","peek","eatWhile","current","indexOf","test","this","textAfter","top","Pass","innerMode","electricInput","lineComment","blockCommentStart","blockCommentEnd","blockCommentContinue","useInnerComments","fold","registerHelper","defineMIME"],"mappings":"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","file":"soy.min.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var indentingTags = [\"template\", \"literal\", \"msg\", \"fallbackmsg\", \"let\", \"if\", \"elseif\",\n                       \"else\", \"switch\", \"case\", \"default\", \"foreach\", \"ifempty\", \"for\",\n                       \"call\", \"param\", \"deltemplate\", \"delcall\", \"log\"];\n\n  CodeMirror.defineMode(\"soy\", function(config) {\n    var textMode = CodeMirror.getMode(config, \"text/plain\");\n    var modes = {\n      html: CodeMirror.getMode(config, {name: \"text/html\", multilineTagIndentFactor: 2, multilineTagIndentPastTag: false}),\n      attributes: textMode,\n      text: textMode,\n      uri: textMode,\n      css: CodeMirror.getMode(config, \"text/css\"),\n      js: CodeMirror.getMode(config, {name: \"text/javascript\", statementIndent: 2 * config.indentUnit})\n    };\n\n    function last(array) {\n      return array[array.length - 1];\n    }\n\n    function tokenUntil(stream, state, untilRegExp) {\n      if (stream.sol()) {\n        for (var indent = 0; indent < state.indent; indent++) {\n          if (!stream.eat(/\\s/)) break;\n        }\n        if (indent) return null;\n      }\n      var oldString = stream.string;\n      var match = untilRegExp.exec(oldString.substr(stream.pos));\n      if (match) {\n        // We don't use backUp because it backs up just the position, not the state.\n        // This uses an undocumented API.\n        stream.string = oldString.substr(0, stream.pos + match.index);\n      }\n      var result = stream.hideFirstChars(state.indent, function() {\n        var localState = last(state.localStates);\n        return localState.mode.token(stream, localState.state);\n      });\n      stream.string = oldString;\n      return result;\n    }\n\n    function contains(list, element) {\n      while (list) {\n        if (list.element === element) return true;\n        list = list.next;\n      }\n      return false;\n    }\n\n    function prepend(list, element) {\n      return {\n        element: element,\n        next: list\n      };\n    }\n\n    // Reference a variable `name` in `list`.\n    // Let `loose` be truthy to ignore missing identifiers.\n    function ref(list, name, loose) {\n      return contains(list, name) ? \"variable-2\" : (loose ? \"variable\" : \"variable-2 error\");\n    }\n\n    function popscope(state) {\n      if (state.scopes) {\n        state.variables = state.scopes.element;\n        state.scopes = state.scopes.next;\n      }\n    }\n\n    return {\n      startState: function() {\n        return {\n          kind: [],\n          kindTag: [],\n          soyState: [],\n          templates: null,\n          variables: null,\n          scopes: null,\n          indent: 0,\n          localStates: [{\n            mode: modes.html,\n            state: CodeMirror.startState(modes.html)\n          }]\n        };\n      },\n\n      copyState: function(state) {\n        return {\n          tag: state.tag, // Last seen Soy tag.\n          kind: state.kind.concat([]), // Values of kind=\"\" attributes.\n          kindTag: state.kindTag.concat([]), // Opened tags with kind=\"\" attributes.\n          soyState: state.soyState.concat([]),\n          templates: state.templates,\n          variables: state.variables,\n          scopes: state.scopes,\n          indent: state.indent, // Indentation of the following line.\n          localStates: state.localStates.map(function(localState) {\n            return {\n              mode: localState.mode,\n              state: CodeMirror.copyState(localState.mode, localState.state)\n            };\n          })\n        };\n      },\n\n      token: function(stream, state) {\n        var match;\n\n        switch (last(state.soyState)) {\n          case \"comment\":\n            if (stream.match(/^.*?\\*\\//)) {\n              state.soyState.pop();\n            } else {\n              stream.skipToEnd();\n            }\n            return \"comment\";\n\n          case \"templ-def\":\n            if (match = stream.match(/^\\.?([\\w]+(?!\\.[\\w]+)*)/)) {\n              state.templates = prepend(state.templates, match[1]);\n              state.scopes = prepend(state.scopes, state.variables);\n              state.soyState.pop();\n              return \"def\";\n            }\n            stream.next();\n            return null;\n\n          case \"templ-ref\":\n            if (match = stream.match(/^\\.?([\\w]+)/)) {\n              state.soyState.pop();\n              // If the first character is '.', try to match against a local template name.\n              if (match[0][0] == '.') {\n                return ref(state.templates, match[1], true);\n              }\n              // Otherwise\n              return \"variable\";\n            }\n            stream.next();\n            return null;\n\n          case \"param-def\":\n            if (match = stream.match(/^\\w+/)) {\n              state.variables = prepend(state.variables, match[0]);\n              state.soyState.pop();\n              state.soyState.push(\"param-type\");\n              return \"def\";\n            }\n            stream.next();\n            return null;\n\n          case \"param-type\":\n            if (stream.peek() == \"}\") {\n              state.soyState.pop();\n              return null;\n            }\n            if (stream.eatWhile(/^[\\w]+/)) {\n              return \"variable-3\";\n            }\n            stream.next();\n            return null;\n\n          case \"var-def\":\n            if (match = stream.match(/^\\$([\\w]+)/)) {\n              state.variables = prepend(state.variables, match[1]);\n              state.soyState.pop();\n              return \"def\";\n            }\n            stream.next();\n            return null;\n\n          case \"tag\":\n            if (stream.match(/^\\/?}/)) {\n              if (state.tag == \"/template\" || state.tag == \"/deltemplate\") {\n                popscope(state);\n                state.indent = 0;\n              } else {\n                if (state.tag == \"/for\" || state.tag == \"/foreach\") {\n                  popscope(state);\n                }\n                state.indent -= config.indentUnit *\n                    (stream.current() == \"/}\" || indentingTags.indexOf(state.tag) == -1 ? 2 : 1);\n              }\n              state.soyState.pop();\n              return \"keyword\";\n            } else if (stream.match(/^([\\w?]+)(?==)/)) {\n              if (stream.current() == \"kind\" && (match = stream.match(/^=\"([^\"]+)/, false))) {\n                var kind = match[1];\n                state.kind.push(kind);\n                state.kindTag.push(state.tag);\n                var mode = modes[kind] || modes.html;\n                var localState = last(state.localStates);\n                if (localState.mode.indent) {\n                  state.indent += localState.mode.indent(localState.state, \"\");\n                }\n                state.localStates.push({\n                  mode: mode,\n                  state: CodeMirror.startState(mode)\n                });\n              }\n              return \"attribute\";\n            } else if (stream.match(/^\"/)) {\n              state.soyState.push(\"string\");\n              return \"string\";\n            }\n            if (match = stream.match(/^\\$([\\w]+)/)) {\n              return ref(state.variables, match[1]);\n            }\n            if (match = stream.match(/^\\w+/)) {\n              return /^(?:as|and|or|not|in)$/.test(match[0]) ? \"keyword\" : null;\n            }\n            stream.next();\n            return null;\n\n          case \"literal\":\n            if (stream.match(/^(?=\\{\\/literal})/)) {\n              state.indent -= config.indentUnit;\n              state.soyState.pop();\n              return this.token(stream, state);\n            }\n            return tokenUntil(stream, state, /\\{\\/literal}/);\n\n          case \"string\":\n            var match = stream.match(/^.*?(\"|\\\\[\\s\\S])/);\n            if (!match) {\n              stream.skipToEnd();\n            } else if (match[1] == \"\\\"\") {\n              state.soyState.pop();\n            }\n            return \"string\";\n        }\n\n        if (stream.match(/^\\/\\*/)) {\n          state.soyState.push(\"comment\");\n          return \"comment\";\n        } else if (stream.match(stream.sol() ? /^\\s*\\/\\/.*/ : /^\\s+\\/\\/.*/)) {\n          return \"comment\";\n        } else if (stream.match(/^\\{literal}/)) {\n          state.indent += config.indentUnit;\n          state.soyState.push(\"literal\");\n          return \"keyword\";\n        } else if (match = stream.match(/^\\{([\\/@\\\\]?[\\w?]*)/)) {\n          if (match[1] != \"/switch\")\n            state.indent += (/^(\\/|(else|elseif|ifempty|case|fallbackmsg|default)$)/.test(match[1]) && state.tag != \"switch\" ? 1 : 2) * config.indentUnit;\n          state.tag = match[1];\n          if (state.tag == \"/\" + last(state.kindTag)) {\n            // We found the tag that opened the current kind=\"\".\n            state.kind.pop();\n            state.kindTag.pop();\n            state.localStates.pop();\n            var localState = last(state.localStates);\n            if (localState.mode.indent) {\n              state.indent -= localState.mode.indent(localState.state, \"\");\n            }\n          }\n          state.soyState.push(\"tag\");\n          if (state.tag == \"template\" || state.tag == \"deltemplate\") {\n            state.soyState.push(\"templ-def\");\n          }\n          if (state.tag == \"call\" || state.tag == \"delcall\") {\n            state.soyState.push(\"templ-ref\");\n          }\n          if (state.tag == \"let\") {\n            state.soyState.push(\"var-def\");\n          }\n          if (state.tag == \"for\" || state.tag == \"foreach\") {\n            state.scopes = prepend(state.scopes, state.variables);\n            state.soyState.push(\"var-def\");\n          }\n          if (state.tag.match(/^@(?:param\\??|inject)/)) {\n            state.soyState.push(\"param-def\");\n          }\n          return \"keyword\";\n        }\n\n        return tokenUntil(stream, state, /\\{|\\s+\\/\\/|\\/\\*/);\n      },\n\n      indent: function(state, textAfter) {\n        var indent = state.indent, top = last(state.soyState);\n        if (top == \"comment\") return CodeMirror.Pass;\n\n        if (top == \"literal\") {\n          if (/^\\{\\/literal}/.test(textAfter)) indent -= config.indentUnit;\n        } else {\n          if (/^\\s*\\{\\/(template|deltemplate)\\b/.test(textAfter)) return 0;\n          if (/^\\{(\\/|(fallbackmsg|elseif|else|ifempty)\\b)/.test(textAfter)) indent -= config.indentUnit;\n          if (state.tag != \"switch\" && /^\\{(case|default)\\b/.test(textAfter)) indent -= config.indentUnit;\n          if (/^\\{\\/switch\\b/.test(textAfter)) indent -= config.indentUnit;\n        }\n        var localState = last(state.localStates);\n        if (indent && localState.mode.indent) {\n          indent += localState.mode.indent(localState.state, textAfter);\n        }\n        return indent;\n      },\n\n      innerMode: function(state) {\n        if (state.soyState.length && last(state.soyState) != \"literal\") return null;\n        else return last(state.localStates);\n      },\n\n      electricInput: /^\\s*\\{(\\/|\\/template|\\/deltemplate|\\/switch|fallbackmsg|elseif|else|case|default|ifempty|\\/literal\\})$/,\n      lineComment: \"//\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      blockCommentContinue: \" * \",\n      useInnerComments: false,\n      fold: \"indent\"\n    };\n  }, \"htmlmixed\");\n\n  CodeMirror.registerHelper(\"hintWords\", \"soy\", indentingTags.concat(\n      [\"delpackage\", \"namespace\", \"alias\", \"print\", \"css\", \"debugger\"]));\n\n  CodeMirror.defineMIME(\"text/x-soy\", \"soy\");\n});\n"]}