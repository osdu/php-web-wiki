{"version":3,"sources":["../../node_modules/codemirror/mode/yaml/yaml.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","cons","keywordRegex","RegExp","join","token","stream","state","ch","peek","esc","escaped","pos","test","string","charAt","skipToEnd","match","literal","indentation","keyCol","sol","pair","pairStart","inlinePairs","inlineList","next","startState","defineMIME"],"mappings":"CAGA,SAAUA,GACR,SAAWC,UAAW,gBAAmBC,SAAU,SACjDF,EAAIG,QAAQ,6BACT,UAAWC,SAAU,YAAcA,OAAOC,IAC7CD,QAAQ,wBAAyBJ,OAEjCA,GAAIM,cACL,SAASA,GACZ,YAEAA,GAAWC,WAAW,OAAQ,WAE5B,GAAIC,IAAQ,OAAQ,QAAS,KAAM,MAAO,MAAO,KACjD,IAAIC,GAAe,GAAIC,QAAO,QAAQF,EAAKG,KAAK,OAAO,MAAO,IAE9D,QACEC,MAAO,SAASC,EAAQC,GACtB,GAAIC,GAAKF,EAAOG,MAChB,IAAIC,GAAMH,EAAMI,OAChBJ,GAAMI,QAAU,KAEhB,IAAIH,GAAM,MAAQF,EAAOM,KAAO,GAAK,KAAKC,KAAKP,EAAOQ,OAAOC,OAAOT,EAAOM,IAAM,KAAM,CACrFN,EAAOU,WACP,OAAO,UAGT,GAAIV,EAAOW,MAAM,oCACf,MAAO,QAET,IAAIV,EAAMW,SAAWZ,EAAOa,cAAgBZ,EAAMa,OAAQ,CACxDd,EAAOU,WAAa,OAAO,aACtB,IAAIT,EAAMW,QAAS,CAAEX,EAAMW,QAAU,MAC5C,GAAIZ,EAAOe,MAAO,CAChBd,EAAMa,OAAS,CACfb,GAAMe,KAAO,KACbf,GAAMgB,UAAY,KAElB,IAAGjB,EAAOW,MAAM,OAAQ,CAAE,MAAO,MAEjC,GAAIX,EAAOW,MAAM,UAAW,CAAE,MAAO,MAErC,GAAIX,EAAOW,MAAM,WAAY,CAAE,MAAO,QAGxC,GAAIX,EAAOW,MAAM,kBAAmB,CAClC,GAAIT,GAAM,IACRD,EAAMiB,kBACH,IAAIhB,GAAM,IACbD,EAAMiB,kBACH,IAAIhB,GAAM,IACbD,EAAMkB,iBAENlB,GAAMkB,YACR,OAAO,OAIT,GAAIlB,EAAMkB,WAAa,IAAMf,GAAOF,GAAM,IAAK,CAC7CF,EAAOoB,MACP,OAAO,OAGT,GAAInB,EAAMiB,YAAc,IAAMd,GAAOF,GAAM,IAAK,CAC9CD,EAAMa,OAAS,CACfb,GAAMe,KAAO,KACbf,GAAMgB,UAAY,KAClBjB,GAAOoB,MACP,OAAO,OAIT,GAAInB,EAAMgB,UAAW,CAEnB,GAAIjB,EAAOW,MAAM,kBAAmB,CAAEV,EAAMW,QAAU,IAAM,OAAO,OAEnE,GAAIZ,EAAOW,MAAM,+BAAgC,CAAE,MAAO,aAE1D,GAAIV,EAAMiB,aAAe,GAAKlB,EAAOW,MAAM,wBAAyB,CAAE,MAAO,SAC7E,GAAIV,EAAMiB,YAAc,GAAKlB,EAAOW,MAAM,gCAAiC,CAAE,MAAO,SAEpF,GAAIX,EAAOW,MAAMf,GAAe,CAAE,MAAO,WAI3C,IAAKK,EAAMe,MAAQhB,EAAOW,MAAM,iFAAkF,CAChHV,EAAMe,KAAO,IACbf,GAAMa,OAASd,EAAOa,aACtB,OAAO,OAET,GAAIZ,EAAMe,MAAQhB,EAAOW,MAAM,SAAU,CAAEV,EAAMgB,UAAY,IAAM,OAAO,OAG1EhB,EAAMgB,UAAY,KAClBhB,GAAMI,QAAWH,GAAM,IACvBF,GAAOoB,MACP,OAAO,OAETC,WAAY,WACV,OACEL,KAAM,MACNC,UAAW,MACXH,OAAQ,EACRI,YAAa,EACbC,WAAY,EACZP,QAAS,MACTP,QAAS,UAMjBZ,GAAW6B,WAAW,cAAe,OACrC7B,GAAW6B,WAAW,YAAa","file":"yaml.min.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"yaml\", function() {\n\n  var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\n  var keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\n\n  return {\n    token: function(stream, state) {\n      var ch = stream.peek();\n      var esc = state.escaped;\n      state.escaped = false;\n      /* comments */\n      if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\n        return \"string\";\n\n      if (state.literal && stream.indentation() > state.keyCol) {\n        stream.skipToEnd(); return \"string\";\n      } else if (state.literal) { state.literal = false; }\n      if (stream.sol()) {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        /* document start */\n        if(stream.match(/---/)) { return \"def\"; }\n        /* document end */\n        if (stream.match(/\\.\\.\\./)) { return \"def\"; }\n        /* array list item */\n        if (stream.match(/\\s*-\\s+/)) { return 'meta'; }\n      }\n      /* inline pairs/lists */\n      if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n        if (ch == '{')\n          state.inlinePairs++;\n        else if (ch == '}')\n          state.inlinePairs--;\n        else if (ch == '[')\n          state.inlineList++;\n        else\n          state.inlineList--;\n        return 'meta';\n      }\n\n      /* list seperator */\n      if (state.inlineList > 0 && !esc && ch == ',') {\n        stream.next();\n        return 'meta';\n      }\n      /* pairs seperator */\n      if (state.inlinePairs > 0 && !esc && ch == ',') {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        stream.next();\n        return 'meta';\n      }\n\n      /* start of value of a pair */\n      if (state.pairStart) {\n        /* block literals */\n        if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\n        /* references */\n        if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable-2'; }\n        /* numbers */\n        if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\n        if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\n        /* keywords */\n        if (stream.match(keywordRegex)) { return 'keyword'; }\n      }\n\n      /* pairs (associative arrays) -> key */\n      if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n        state.pair = true;\n        state.keyCol = stream.indentation();\n        return \"atom\";\n      }\n      if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\n\n      /* nothing found, continue */\n      state.pairStart = false;\n      state.escaped = (ch == '\\\\');\n      stream.next();\n      return null;\n    },\n    startState: function() {\n      return {\n        pair: false,\n        pairStart: false,\n        keyCol: 0,\n        inlinePairs: 0,\n        inlineList: 0,\n        literal: false,\n        escaped: false\n      };\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-yaml\", \"yaml\");\nCodeMirror.defineMIME(\"text/yaml\", \"yaml\");\n\n});\n"]}